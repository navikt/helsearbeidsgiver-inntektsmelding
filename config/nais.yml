# Templated nais.yml for all apps in all clusters.
#
# Run the deployment tool with 'dry run' to see the results:
# docker run --rm -it -v $(PWD)/config:/config \
#   -e CLUSTER=dev-fss \
#   -e VAR="app=aareg" \
#   ghcr.io/nais/deploy/deploy:latest /app/deploy \
#     --dry-run --print-payload --resource /config/nais.yml --vars /config/myapp/dev-
apiVersion: nais.io/v1alpha1
kind: Application
metadata:
  name: im-{{ app }}
  namespace: helsearbeidsgiver
  labels:
    team: helsearbeidsgiver
  {{#if texasEnabled}}
  annotations:
    texas.nais.io/enabled: {{ texasEnabled }}
  {{/if}}
spec:
  image: {{ image }}
  resources:
    requests:
      cpu: 50m
      memory: 512Mi
    limits:
      memory: 1024Mi
  replicas:
    min: {{#if replicasMin }}{{ replicasMin }}{{else}}1{{/if}}
    max: {{#if replicasMax }}{{ replicasMax }}{{else}}1{{/if}}
    scalingStrategy:
      cpu:
        thresholdPercentage: 75
  startup:
    path: /isalive
    initialDelay: 10
    periodSeconds: 5
    failureThreshold: 22
  liveness:
    path: /isalive
  readiness:
    path: /isready
  secureLogs:
    enabled: true
  observability:
    autoInstrumentation:
      enabled: true
      runtime: java
  prometheus:
    enabled: true
  {{#if ingress}}
  ingresses:
    - {{ ingress }}
  {{/if}}
  {{#if kafkaPool}}
  kafka:
    pool: {{ kafkaPool }}
  {{/if}}
  {{#if azure}}
  azure:
    application:
      enabled: {{ azure.enabled }}
  {{/if}}
  {{#if valkeyAccess}}
  valkey:
    - instance: inntektsmelding
      access: {{ valkeyAccess }}
  {{/if}}
  {{#if database}}
  gcp:
    sqlInstances:
      - type: POSTGRES_14
        {{#if database.cascadingDelete}}
        cascadingDelete: {{ database.cascadingDelete }}
        {{/if}}
        tier: {{ database.tier }}
        databases:
          - name: {{ database.name }}
            {{#if database.user}}
            users:
              - name: {{ database.user }}
            {{/if}}
        flags:
          - name: cloudsql.enable_pgaudit
            value: "true"
          - name: pgaudit.log
            value: 'write'
        {{#if database.logicalDecoding}}
          - name: cloudsql.logical_decoding
            value: "on"
        {{/if}}
  {{/if}}
  {{#if envFrom}}
  envFrom:
    {{# each envFrom as |item| }}
    - {{ item.type }}: {{ item.name }}
    {{/each}}
  {{/if}}
  env:
    - name: KAFKA_CONSUMER_GROUP_ID
      value: helsearbeidsgiver-im-{{app}}-v1
    - name: KAFKA_RAPID_TOPIC
      value: helsearbeidsgiver.rapid
    {{#if env}}{{# each env as |item| }}
    - name: {{ item.name }}
      value: "{{ item.value }}"
    {{/each}}{{/if}}
  {{#if idportenEnabled}}
  idporten:
    enabled: true
    sidecar:
      enabled: true
  {{/if}}
  {{#if maskinporten}}
  maskinporten:
    enabled: true
    scopes:
      consumes:
        {{#each maskinporten.consumes as |consume| }}
        - name: "{{ consume }}"
        {{/each}}
  {{/if}}
  accessPolicy:
    outbound:
      external:
      {{#if externalHosts}}{{# each externalHosts as |item| }}
        - host: {{ item }}
      {{/each}}{{/if}}
      rules:
        {{#if apps}}{{# each apps as |app| }}
        - application: {{ app.name }}
          {{#if app.namespace}}
          namespace: {{ app.namespace }}
          {{/if}}
        {{/each}}{{/if}}
    {{#if inboundApps}}
    inbound:
      rules:
        {{# each inboundApps as |app| }}
        - application: {{ app.name }}
          {{#if app.namespace}}
          namespace: {{ app.namespace }}
          {{/if}}
        {{/each}}
    {{/if}}
