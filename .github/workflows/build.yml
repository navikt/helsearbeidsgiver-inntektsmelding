name: Build
on:
  push:
    branches:
      - main
      - 'preprod/**'
env:
  DOCKER_REGISTRY: docker.pkg.github.com
  DOCKER_IMAGE_PREFIX: ${{ github.repository }}/im-
  RESOURCE: config/nais.yml
  TEAM: helsearbeidsgiver
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}

jobs:
  generate_vars:
    runs-on: ubuntu-latest
    outputs:
      team: ${{ steps.set-vars.outputs.team }}
      tag: ${{ steps.set-vars.outputs.tag }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      deployMatrix: ${{ steps.set-matrix.outputs.deployMatrix }}
      emptyMatrix: ${{ steps.set-matrix.outputs.emptyMatrix }}
      emptyDeployMatrix: ${{ steps.set-matrix.outputs.emptyDeployMatrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: cache gradle wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: cache gradle caches
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/build.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-

      - id: set-vars
        run: |
          TAG=$(echo ${{ github.sha }} | cut -c1-7)
          echo "::set-output name=team::$TEAM"
          echo "::set-output name=tag::$TAG"

      - id: set-changed-files
        run: |
          # create a comma-separated list of changed files
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r $GITHUB_SHA | tr '\r\n' ',' | sed -e 's/,$//')
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV

      - id: set-matrix
        run: |
          MATRIX=$(./gradlew -q buildMatrix --console=plain)
          DEPLOY_MATRIX=$(./gradlew -q deployMatrix --console=plain)
          MATRIX_SIZE=$(echo $MATRIX | jq '.project|length')
          DEPLOY_MATRIX_SIZE=$(echo $DEPLOY_MATRIX | jq '.project|length')

          if [ "$MATRIX_SIZE" == '0' ]; then
            echo "Empty matrix"
            echo "::set-output name=matrix::[]" # to prevent error because matrix is empty
            echo "::set-output name=emptyMatrix::true"
          else
            echo Setting matrix to $MATRIX
            echo "::set-output name=matrix::$MATRIX"
            echo "::set-output name=emptyMatrix::false"
          fi
          if [ "$DEPLOY_MATRIX_SIZE" == '0' ]; then
            echo "Empty deploy matrix"
            echo "::set-output name=deployMatrix::[]" # to prevent error because matrix is empty
            echo "::set-output name=emptyDeployMatrix::true"
          else
            echo Setting deploy matrix to $DEPLOY_MATRIX
            echo "::set-output name=deployMatrix::$DEPLOY_MATRIX"
            echo "::set-output name=emptyDeployMatrix::false"
          fi

  build:
    runs-on: ubuntu-latest
    needs: generate_vars
    if: needs.generate_vars.outputs.emptyMatrix == 'false'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.generate_vars.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: cache gradle wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: cache gradle caches
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/build.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-

      - name: test and build
        run: ./gradlew ${{ matrix.project }}::test ${{ matrix.project }}::build

      - name: Check app.jar existence
        id: app_jar
        uses: andstor/file-existence-action@v1
        with:
          files: "${{ matrix.project }}/build/libs/app.jar"

      - name: create docker tag
        if: steps.app_jar.outputs.files_exists == 'true'
        run: |
          echo "IMAGE=${DOCKER_REGISTRY}/${DOCKER_IMAGE_PREFIX}${{ matrix.project }}:${{ needs.generate_vars.outputs.tag }}" >> $GITHUB_ENV

      - name: build docker image
        if: steps.app_jar.outputs.files_exists == 'true'
        run: docker build ${{ matrix.project }} --pull -t $IMAGE -f Dockerfile

      - name: push docker image
        if: steps.app_jar.outputs.files_exists == 'true'
        run: |
          echo $GITHUB_TOKEN | docker login --username $GITHUB_REPOSITORY --password-stdin https://docker.pkg.github.com
          docker push $IMAGE

  deploy:
    runs-on: ubuntu-latest
    needs: [generate_vars, build]
    if: always() && needs.generate_vars.outputs.emptyDeployMatrix == 'false'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.generate_vars.outputs.deployMatrix) }}
    steps:
      - name: check if docker image exists
        id: docker-exists
        run: |
          layers=$(curl -X GET https://docker.pkg.github.com/v2/${DOCKER_IMAGE_PREFIX}${{ matrix.project }}/manifests/${{ needs.generate_vars.outputs.tag }} -u $GITHUB_ACTOR:$GITHUB_TOKEN | jq '.layers')
          if [ "$layers" == 'null' ]; then
            echo "::set-output name=exists::false"
          else
            echo "::set-output name=exists::true"
          fi

      - name: create env vars
        if: steps.docker-exists.outputs.exists == 'true'
        run: |
          VARS_FILE="config/${{ matrix.project }}/${{ matrix.cluster }}.yml"
          echo "VARS=$VARS_FILE" >> $GITHUB_ENV
          echo "IMAGE=${DOCKER_REGISTRY}/${DOCKER_IMAGE_PREFIX}${{ matrix.project }}:${{ needs.generate_vars.outputs.tag }}" >> $GITHUB_ENV

      - name: Fetch sources
        if: steps.docker-exists.outputs.exists == 'true'
        uses: actions/checkout@v3

      - name: Check for vars yml
        if: steps.docker-exists.outputs.exists == 'true'
        id: vars_file
        uses: andstor/file-existence-action@v1
        with:
          files: "${{ env.VARS }}"

      - name: deploy
        if: steps.docker-exists.outputs.exists == 'true' && steps.vars_file.outputs.files_exists == 'true'
        uses: nais/deploy/actions/deploy@v1
        env:
          CLUSTER: ${{ matrix.cluster }}
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          VAR: team=${{ needs.generate_vars.outputs.team }},app=${{ matrix.project }}
