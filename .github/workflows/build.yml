name: Build

on:
  push:
    branches:
      - main
      - preprod/**
env:
  TEAM: helsearbeidsgiver
  ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}

jobs:
  generate_vars:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
      is_matrix_empty: ${{ steps.set_matrix.outputs.is_matrix_empty }}
      deploy_matrix: ${{ steps.set_matrix.outputs.deploy_matrix }}
      is_deploy_matrix_empty: ${{ steps.set_matrix.outputs.is_deploy_matrix_empty }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Cache gradle wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: Cache gradle caches
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/build.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-

      - name: Determine changes files
        run: |
          # Create a comma-separated list of changed files for use in build.gradle.kts
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r -m $GITHUB_SHA | tr '\r\n' ',' | sed -e 's/,$//' | tr -d '"')
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV

      - name: Determine projects to deploy
        id: set_matrix
        run: |
          MATRIX=$(./gradlew -q buildMatrix --console=plain)
          DEPLOY_MATRIX=$(./gradlew -q deployMatrix --console=plain)
          MATRIX_SIZE=$(echo $MATRIX | jq '.project|length')
          DEPLOY_MATRIX_SIZE=$(echo $DEPLOY_MATRIX | jq '.project|length')

          if [ "$MATRIX_SIZE" == '0' ]; then
            echo "Empty matrix"
            echo "matrix=[]" >> $GITHUB_OUTPUT # to prevent error because matrix is empty
            echo "is_matrix_empty=true" >> $GITHUB_OUTPUT
          else
            echo Setting matrix to $MATRIX
            echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
            echo "is_matrix_empty=false" >> $GITHUB_OUTPUT
          fi
          if [ "$DEPLOY_MATRIX_SIZE" == '0' ]; then
            echo "Empty deploy matrix"
            echo "deploy_matrix=[]" >> $GITHUB_OUTPUT # to prevent error because matrix is empty
            echo "is_deploy_matrix_empty=true" >> $GITHUB_OUTPUT
          else
            echo Setting deploy matrix to $DEPLOY_MATRIX
            echo "deploy_matrix=$DEPLOY_MATRIX" >> $GITHUB_OUTPUT
            echo "is_deploy_matrix_empty=false" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    needs: generate_vars
    if: needs.generate_vars.outputs.is_matrix_empty == 'false'
    strategy:
      matrix: ${{ fromJSON(needs.generate_vars.outputs.matrix) }}
      fail-fast: false
    outputs:
      docker_image_${{ matrix.project }}: ${{ steps.docker_push.outputs.image }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: Cache gradle wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: Cache gradle caches
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/build.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-

      - name: Test and build
        run: ./gradlew ${{ matrix.project }}::test ${{ matrix.project }}::build

      - name: Publish artefacts
        run: ./gradlew ${{ matrix.project }}::publish
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USERNAME: x-access-token
          GITHUB_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Check app.jar existence
        id: app_jar
        uses: andstor/file-existence-action@v2
        with:
          files: "${{ matrix.project }}/build/libs/app.jar"

      - name: Build and push docker image
        uses: nais/docker-build-push@v0
        id: docker_push
        if: steps.app_jar.outputs.files_exists == 'true'
        with:
          team: ${{ env.TEAM }}
          docker_context: ${{ matrix.project }}
          image_suffix: im-${{ matrix.project }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}

  deploy:
    runs-on: ubuntu-latest
    needs: [generate_vars, build]
    if: needs.generate_vars.outputs.is_deploy_matrix_empty == 'false'
    strategy:
      matrix: ${{ fromJSON(needs.generate_vars.outputs.deploy_matrix) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v3

      - name: Determine app configuration file
        run: |
          CONFIG_FILE="config/${{ matrix.project }}/${{ matrix.cluster }}.yml"
          echo "VARS=$CONFIG_FILE" >> $GITHUB_ENV # VARS-variable is used by nais/deploy/actions/deploy@v1

      - name: Confirm app configuration file existence
        id: confirm_config_file
        uses: andstor/file-existence-action@v2
        with:
          files: "${{ env.VARS }}"

      - name: Deploy
        if: steps.confirm_config_file.outputs.files_exists == 'true'
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: ${{ matrix.cluster }}
          IMAGE: ${{ needs.build.outputs[format('docker_image_{0}', matrix.project)] }}
          RESOURCE: config/nais.yml
          VAR: team=${{ env.TEAM }},app=${{ matrix.project }}
